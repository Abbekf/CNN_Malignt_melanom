# pages/1_Klassificerare.py
# ---------------------------------------------------------------
# Live-klassificerare f√∂r melanom
# - L√•st input 224x224
# - Justerbar f√∂rhandsgranskning
# - Score-CAM alltid p√• (ingen Grad-CAM)
# - Robust mot list/tuple-outputs
# ---------------------------------------------------------------

from pathlib import Path
import io
import numpy as np
from PIL import Image
import streamlit as st
import tensorflow as tf
from tensorflow import keras

# ---------- Konfiguration ----------
MODEL_PATH = Path(__file__).resolve().parent.parent / "exported_models" / "keras_tuner_best_finetuned.h5"
CLASS_NAMES = ["benign", "malignant"]
FIXED_INPUT_SIZE = (224, 224)  # l√•st f√∂r inferens

st.set_page_config(page_title="Klassificerare", layout="wide", initial_sidebar_state="expanded")

# CSS (fr√•n projektroten)
css_path = Path(__file__).resolve().parents[1] / "style.css"
if css_path.exists():
    st.markdown(f"<style>{css_path.read_text()}</style>", unsafe_allow_html=True)

# ---------- Hj√§lpfunktioner ----------
def _preprocess_pil(img: Image.Image, target_size=(224, 224)) -> np.ndarray:
    """PIL -> normaliserat batch-tensor [1,H,W,3] i [0,1]."""
    img = img.convert("RGB").resize(target_size)
    arr = np.asarray(img, dtype=np.float32) / 255.0
    return np.expand_dims(arr, axis=0)

def _predict(model: keras.Model, img_tensor: np.ndarray) -> float:
    """Returnera sannolikhet f√∂r klass index 1 = 'malignant'."""
    pred = model.predict(img_tensor, verbose=0)
    if isinstance(pred, (list, tuple)):
        pred = pred[0]
    pred = np.asarray(pred)
    if pred.ndim == 2 and pred.shape[1] == 1:      # sigmoid (N,1)
        return float(pred[0, 0])
    if pred.ndim == 2 and pred.shape[1] == 2:      # softmax (N,2)
        return float(pred[0, 1])
    if pred.ndim == 1 and pred.shape[0] >= 1:      # (N,)
        return float(pred[0])
    raise ValueError(f"Unexpected model output shape: {pred.shape}")

def _pct(x: float) -> str:
    return f"{x*100:.1f}%"

@st.cache_resource(show_spinner=True)
def load_model_fixed() -> keras.Model:
    if not MODEL_PATH.exists():
        raise FileNotFoundError(f"Hittar inte modellen:\n{MODEL_PATH}")
    return keras.models.load_model(str(MODEL_PATH))

def _candidate_conv_layers(model: keras.Model):
    """Lista alla lager som producerar 4D feature maps (oavsett lagertyp)."""
    names = []
    for layer in model.layers:
        out = getattr(layer, "output", None)
        if out is None:
            continue
        for o in tf.nest.flatten(out):
            try:
                if len(o.shape) == 4:
                    names.append(layer.name)
                    break
            except Exception:
                pass
    return names

# ---- Score-CAM (ingen gradient, bara forward passes) ----
def _score_cam(model: keras.Model, img_tensor: np.ndarray, layer_name: str,
               class_index: int = 1, max_channels: int = 32) -> np.ndarray:
    """
    Score-CAM (f√∂renklad):
      1) H√§mta feature maps fr√•n valt lager
      2) Normalisera varje kanal och skala upp till inputstorlek
      3) Anv√§nd varje karta som mask p√• indata och k√∂r prediktion
      4) Viktad summa av kartor med respektive klass-score
    """
    # 1) Feature maps
    conv_layer = model.get_layer(layer_name)
    fmap_model = tf.keras.models.Model(inputs=model.inputs, outputs=conv_layer.output)
    fmap = fmap_model(img_tensor)
    if isinstance(fmap, (list, tuple)):
        fmap = fmap[0]
    fmap = tf.convert_to_tensor(fmap)   # [1,h,w,c]
    c = int(fmap.shape[-1])

    use_c = min(c, max_channels)
    fmap = fmap[:, :, :, :use_c]        # [1,h,w,use_c]

    # 2) Normalisera + skala upp till [H,W,use_c]
    fmap_min = tf.reduce_min(fmap, axis=(1, 2), keepdims=True)
    fmap_max = tf.reduce_max(fmap, axis=(1, 2), keepdims=True)
    denom = tf.where(fmap_max - fmap_min > 1e-9, fmap_max - fmap_min, tf.ones_like(fmap_max))
    fmap_norm = (fmap - fmap_min) / denom
    fmap_up = tf.image.resize(fmap_norm[0], size=FIXED_INPUT_SIZE, method="bilinear")  # [H,W,use_c]
    fmap_up = tf.clip_by_value(fmap_up, 0.0, 1.0)

    # 3) Bygg batch med maskerade bilder: [use_c,H,W,3]
    img = tf.convert_to_tensor(img_tensor[0])                 # [H,W,3]
    masks = tf.transpose(fmap_up, [2, 0, 1])[:, :, :, None]   # [use_c,H,W,1]
    img_batch = img[None, ...]                                # [1,H,W,3]
    masked_batch = img_batch * masks                          # [use_c,H,W,3]  (broadcast korrekt)

    preds = model.predict(masked_batch, verbose=0)
    if isinstance(preds, (list, tuple)):
        preds = preds[0]
    preds = tf.convert_to_tensor(preds)

    # 4) Klass-score
    if preds.shape.rank == 2 and preds.shape[-1] >= 2:
        scores = preds[:, class_index]           # [use_c]
    elif preds.shape.rank == 2 and preds.shape[-1] == 1:
        scores = preds[:, 0]                     # [use_c]
    elif preds.shape.rank == 1:
        scores = preds                           # [use_c]
    else:
        flat = tf.reshape(preds, (tf.shape(preds)[0], -1))
        scores = flat[:, 0]

    # Viktad summa -> [H,W]
    weighted = tf.einsum("chw, c -> hw", tf.transpose(fmap_up, [2, 0, 1]), scores)
    weighted = tf.nn.relu(weighted)
    weighted = weighted / (tf.reduce_max(weighted) + 1e-8)
    return weighted.numpy()

def _overlay_heatmap_on_pil(pil_img: Image.Image, heatmap: np.ndarray,
                            intensity: float = 0.45, cmap: str = "jet") -> Image.Image:
    """F√§rgl√§gg heatmap med matplotlib colormap och blanda med originalbilden."""
    import matplotlib.cm as cm
    heat_uint8 = np.uint8(255 * np.clip(heatmap, 0, 1))
    colored = cm.get_cmap(cmap)(heat_uint8)[..., :3]  # slopa alpha
    colored = (colored * 255).astype(np.uint8)
    heat_pil = Image.fromarray(colored).resize(pil_img.size, resample=Image.BILINEAR)
    return Image.blend(pil_img.convert("RGB"), heat_pil, alpha=float(intensity))

# ---------- UI ----------
st.title("ü©∫ Live-klassificerare")
st.caption(
    "Den h√§r sidan anv√§nder **endast** modellen `exported_models/keras_tuner_best_finetuned.h5`."
    " Ladda upp en bild f√∂r att f√• ett resultat. **Inputstorlek:** 224√ó224 px (l√•st)."
)

with st.sidebar:
    debug = st.toggle("Visa debug-info", value=False)

    try:
        model = load_model_fixed()
        st.write(f"L√§rda parametrar: **{model.count_params():,}**")
        st.write(f"Lager: **{len(model.layers)}**")
    except Exception as e:
        st.error(str(e)); st.stop()

    thr = st.slider("Beslutsgr√§ns (malign om sannolikhet ‚â• gr√§ns)", 0.05, 0.95, 0.50, 0.01)

    st.markdown("---")
    st.markdown("**Modellens inputstorlek:** 224 √ó 224 px (l√•st)")

    st.markdown("---")
    st.markdown("### Bildvisning")
    fit_to_container = st.toggle("Skala till sidans bredd", value=False)
    preview_width = st.slider("F√∂rhandsgranskningens bredd (px)", 320, 1400, 900, step=10, disabled=fit_to_container)
    st.caption("Endast visningsstorlek. Modellen anv√§nder alltid 224√ó224 f√∂r inferens.")

    st.markdown("---")
    st.markdown("### Score-CAM (f√∂rklaring)")
    cam_intensity = st.slider("Heatmap-intensitet", 0.05, 0.95, 0.45, 0.05)
    cam_map = st.selectbox("F√§rgskala", ["jet", "magma", "inferno", "plasma", "viridis"], index=3)
    max_chan = st.slider("Antal kanaler (fart vs. detalj)", 8, 64, 32, step=8)
    st.caption("Fler kanaler = tydligare karta men l√•ngsammare.")

st.divider()

uploaded = st.file_uploader(
    "Ladda upp en bild (JPG/PNG). Bilden besk√§rs inte ‚Äì endast skalas.",
    type=["jpg", "jpeg", "png"],
    accept_multiple_files=False,
)
if uploaded is None:
    st.info("üì∑ V√§lj en bild f√∂r att k√∂ra klassificering.")
    st.stop()

# F√∂rhandsgranskning
try:
    pil_img = Image.open(io.BytesIO(uploaded.read()))
except Exception:
    st.error("Kunde inte l√§sa bilden. F√∂rs√∂k med en JPG/PNG."); st.stop()

kwargs = {"use_container_width": True} if fit_to_container else {"width": int(preview_width)}
st.markdown('<div class="img-frame">', unsafe_allow_html=True)
st.image(pil_img, caption="F√∂rhandsgranskning", **kwargs)
st.markdown('</div>', unsafe_allow_html=True)

# Prediktion
with st.spinner("Klassificerar..."):
    x = _preprocess_pil(pil_img, target_size=FIXED_INPUT_SIZE)
    p_mal = _predict(model, x)
    p_ben = 1.0 - p_mal
    is_mal = p_mal >= thr
    pred_label = CLASS_NAMES[1 if is_mal else 0]

st.subheader("Resultat")
c1, c2, c3 = st.columns(3)
c1.metric("Benign", _pct(p_ben))
c2.metric("Malignant", _pct(p_mal))
c3.metric("Beslutsgr√§ns", _pct(thr))

if is_mal:
    st.error(f"**Prediktion: {pred_label.upper()}**  (‚â• gr√§ns)")
else:
    st.success(f"**Prediktion: {pred_label.capitalize()}**  (< gr√§ns)")

st.caption(
    "Notera: Sannolikheterna kommer direkt fr√•n modellen. "
    "Beslutsgr√§nsen (threshold) styr hur strikt vi √§r n√§r vi kallar n√•got 'malign'."
)

# ---- Score-CAM (alltid p√•) ----
try:
    candidates = _candidate_conv_layers(model)
    if not candidates:
        raise RuntimeError("Modellen inneh√•ller inga 4D-lager att anv√§nda f√∂r CAM.")
    used_layer = candidates[-1]  # sista 4D-lagret (vanligtvis n√§rmast klassificeraren)

    with st.spinner("Ber√§knar Score-CAM‚Ä¶"):
        heatmap = _score_cam(model, x, used_layer, class_index=1, max_channels=max_chan)

    overlay = _overlay_heatmap_on_pil(pil_img, heatmap, intensity=cam_intensity, cmap=cam_map)
    st.markdown(f"#### CAM (omr√•den som bidrog mest till 'malignant')  \n*Lager:* `{used_layer}` ¬∑ *Metod:* `Score-CAM`")
    oc1, oc2 = st.columns(2)
    with oc1:
        st.image(overlay, caption="√ñverlagrad heatmap", **kwargs)
    with oc2:
        hm_img = Image.fromarray(np.uint8(heatmap * 255)).resize(pil_img.size, Image.BILINEAR)
        st.image(hm_img, caption="Heatmap (gr√•skala, 0‚Äì255)", **kwargs)

    st.caption("Tips: Croppa s√• att fl√§cken fyller st√∂rre del av bilden f√∂r tydligare aktiveringar.")
except Exception as e:
    st.info(f"CAM kunde inte ber√§knas: {e}")
    if debug:
        try:
            st.write("‚Ä¢ 4D-kandidater (bakifr√•n):", list(reversed(_candidate_conv_layers(model))))
        except Exception as ee:
            st.write("‚Ä¢ Kunde inte lista kandidater:", ee)
