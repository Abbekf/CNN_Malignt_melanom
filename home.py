# home.py  ‚Äî Start page / Overview
from pathlib import Path
import io
import streamlit as st
from streamlit.components.v1 import html


# M√•ste ligga tidigt
st.set_page_config(page_title="Malignt melanom", layout="wide", initial_sidebar_state="collapsed")
html('<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">', height=0)

# --- MOBIL ULTRA-COMPACT OVERRIDES ---
st.markdown("""
<style>
/* Mindre grundtyp p√• mobil (g√∂r allt kompaktare) */
@media (max-width: 820px){
  html { font-size: 14px !important; }                      /* s√§nker basen */
  .block-container { padding: 10px !important; }            /* mindre sidopadding */
  section.main > div { max-width: 100% !important; }        /* l√•t inneh√•ll anv√§nda hela bredden */
}

/* Rubriker (tvinga ned storleken ordentligt) */
h1, .stMarkdown h1, [data-testid="stMarkdownContainer"] h1 {
  font-size: clamp(1.2rem, 4.2vw, 1.7rem) !important;
  line-height: 1.15 !important;
  margin: 0.35rem 0 0.5rem 0 !important;
}
h2, .stMarkdown h2, [data-testid="stMarkdownContainer"] h2 {
  font-size: clamp(1.05rem, 3.6vw, 1.35rem) !important;
  line-height: 1.2 !important;
  margin: 0.4rem 0 0.45rem 0 !important;
}
h3, .stMarkdown h3 {
  font-size: clamp(0.95rem, 3.2vw, 1.2rem) !important;
}

/* Br√∂dtext & listor */
p, .stMarkdown p, [data-testid="stMarkdownContainer"] p, li {
  font-size: clamp(0.95rem, 3.3vw, 1.02rem) !important;
  line-height: 1.45 !important;
  margin: 0.35rem 0 !important;
}

/* Kort/containers med mycket luft: pressa ned padding */
[data-testid="stVerticalBlock"] > div { padding: 0.6rem !important; }

/* Knappar / inputs i full bredd p√• mobil */
@media (max-width: 820px){
  .stButton>button, .stDownloadButton>button,
  .stTextInput input, .stNumberInput input, .stSelectbox, .stFileUploader {
    width: 100% !important;
  }
}

/* Bilder & diagram: fyll bredd men inte mer √§n sk√§rmen h√∂jdm√§ssigt */
.stImage img, .stPyplot, .stPlotlyChart, .stAltairChart {
  width: 100% !important; height: auto !important; max-height: 80vh !important;
}

/* Tabs: g√∂r listan scroll-bar ist√§llet f√∂r att trycka ihop titlar */
[data-baseweb="tab-list"] {
  overflow-x: auto !important;
  flex-wrap: nowrap !important;
  scrollbar-width: none;
}
[data-baseweb="tab-list"]::-webkit-scrollbar { display: none; }
[data-baseweb="tab"] { min-width: max-content !important; }

/* Tab-panel: lite tajtare padding */
[data-baseweb="tab-panel"] { padding: 0.5rem 0 0 0 !important; }

/* Tabeller ‚Äì horisontell scroll vid behov */
[data-testid="stDataFrame"] { overflow: auto hidden; }

/* D√∂lj Streamlit-menyer p√• mobil f√∂r ren vy (frivilligt) */
@media (max-width: 820px){ #MainMenu, footer { display: none !important; } }
</style>
""", unsafe_allow_html=True)



# ---------------- Page config ----------------
st.set_page_config(
    page_title="Malignt Melanom ‚Äì Start",
    layout="wide",
    initial_sidebar_state="expanded",
)

# ---------------- CSS ----------------
css_path = Path(__file__).resolve().parent / "style.css"
if css_path.exists():
    st.markdown(f"<style>{css_path.read_text()}</style>", unsafe_allow_html=True)

# ---------------- Model meta (optional, cached) ----------------
# We try to load the model once to show learned params/layers on the start page.
MODEL_PATH = Path(__file__).resolve().parent / "exported_models" / "keras_tuner_best_finetuned.h5"

@st.cache_resource(show_spinner=False)
def _load_model_meta():
    try:
        from tensorflow import keras  # lazy import so start page stays fast if TF not installed
        model = keras.models.load_model(str(MODEL_PATH))
        param_count = model.count_params()
        layer_count = len(model.layers)
        return int(param_count), int(layer_count)
    except Exception:
        return None, None

param_count, layer_count = _load_model_meta()

# ---------------- HERO ----------------
st.markdown(
    """
<div class="mdc-hero">
  <h1>Malignt Melanom ‚Äì Klassificeringsprojekt</h1>
  <p>CNN-baserad klassificering (studieprojekt). Byggt av Abbe ‚Äì f√∂r demo och utbildning. <b>Ej f√∂r medicinskt bruk.</b></p>
</div>
""",
    unsafe_allow_html=True,
)

st.markdown("---")

# ---------------- Quick KPIs ----------------
k1, k2, k3, k4 = st.columns(4)
with k1:
    st.metric("Dataset (Kaggle)", "‚âà 10 000 bilder")
with k2:
    st.metric("Keras-Tuner tid", "13,5 timmar")
with k3:
    st.metric("L√§rda parametrar", f"{param_count:,}" if param_count else "‚Äî")
with k4:
    st.metric("AUC", "0.976")

st.markdown("---")

# ---------------- Intro + Navigation ----------------
cL, cR = st.columns([1.2, 1])

with cL:
    st.subheader("Vad √§r detta?")
    st.write(
        """
Det h√§r √§r en pedagogisk demo som visar hur ett Convolutional Neural Network (CNN) kan klassificera
hudf√∂r√§ndringar som **benigna** eller **maligna**. Projektet fokuserar p√• hela ML-fl√∂det:
*data ‚Üí tr√§ning ‚Üí utv√§rdering ‚Üí inferens (live)*.
        """
    )

    st.subheader("Hur anv√§nder jag sidan?")
    st.markdown(
        """
- **Klassificerare** ‚Äì ladda upp en bild och se modellens prediktion live.  
- **Utv√§rdering** ‚Äì utforska resultat: *Loss*, *Accuracy*, *Confusion Matrix*, *ROC-kurva*, *UMAP*.  
- **Tips f√∂r egna foton** ‚Äì croppa s√• att fl√§cken fyller bilden, anv√§nd j√§mnt ljus och undvik h√•r/skuggor.
        """
    )

    # Direct links to subpages (works in modern Streamlit)
    try:
        st.page_link("pages/1_Klassificerare.py", label="ü©∫ √ñppna Klassificerare", icon="ü©∫")
        st.page_link("pages/2_Utvardering.py", label="üìä Se Utv√§rdering", icon="üìä")
    except Exception:
        st.info("Anv√§nd sidomenyn till v√§nster f√∂r att √∂ppna **Klassificerare** och **Utv√§rdering**.")

with cR:
    import streamlit as st
    from urllib.parse import quote_plus

    st.subheader("üì± Dela appen med QR-kod")
    st.caption("Skanna QR-koden nedan f√∂r att √∂ppna appen direkt:")

    app_url = "https://abbekf-cnn-malignt-melanom-home-dpiqho.streamlit.app/"  # byt till din riktiga URL

    qr_img_url = f"https://api.qrserver.com/v1/create-qr-code/?size=360x360&data={quote_plus(app_url)}"

    c1, c2, c3 = st.columns([1,2,1])
    with c2:
        st.image(qr_img_url, caption="√ñppna appen genom att scanna QR-koden", use_container_width=True)
        st.markdown(f"[√ñppna appen h√§r]({app_url})")

    st.markdown("---")

# ---------------- Project details ----------------
st.subheader("Projekt i korthet")
st.markdown(
    """
- **Data**: Nedladdat **Kaggle-dataset (~10 000 bilder)** med hudf√∂r√§ndringar.  
- **Tr√§ning & tuning**: Keras-Tuner k√∂rdes i **13,5 timmar** f√∂r att hitta en bra konfiguration;
  b√§sta modellen finjusterades (transfer learning).  
- **Inferens**: Appen anv√§nder en **l√•st inputstorlek 224√ó224 px** och ber√§knar sannolikhet f√∂r *malign*.  
- **Syfte**: Visa ML-fl√∂det och ge ett pedagogiskt demo ‚Äì **inte** att ers√§tta klinisk diagnostik.
"""
)

# ---------------- What you can do here ----------------
st.subheader("Vad kan du g√∂ra h√§r?")
st.markdown(
    """
- **Testa egna bilder** (helst croppade s√• fl√§cken fyller bilden) och se hur sannolikheten p√•verkas.  
- **Justera beslutsgr√§nsen (threshold)** i klassificeraren och visa hur *precision/recall-trade-off* √§ndras.  
- **Visa tr√§ningskurvor** (Loss/Accuracy) f√∂r att diskutera under/√∂veranpassning.  
- **F√∂rklara modellen** med *Confusion Matrix*, *Classification report* och *ROC-AUC*.  
- **Illustrera representationer** med *UMAP* (hur modellen separerar klasser).
"""
)

# ---------------- Limitations ----------------
st.subheader("Begr√§nsningar att k√§nna till")
st.markdown(
    """
- Tr√§ningsdata best√•r fr√§mst av **dermatoskopiska** bilder. **Mobilbilder** med varierande ljus/bakgrund kan ge missvisande resultat.  
- Sannolikheten √§r **inte** en medicinsk riskbed√∂mning; den anger hur mycket bilden liknar datasetets *maligna* exempel.  
- Modellen √§r ett **studieprojekt** och ska inte anv√§ndas f√∂r kliniska beslut.
"""
)

# ---------------- Roadmap / Future work ----------------
st.subheader("F√∂rb√§ttringar jag vill g√∂ra")
st.markdown(
    """
- **Datadiversitet**: L√§gg till fler **mobilbilder** + olika hudtoner/ljuss√§ttningar (domain adaptation).  
- **Aktiv inl√§rning**: L√•t anv√§ndare flagga os√§kra fall ‚Üí bygg kurering/aktiv inl√§rning f√∂r n√§sta tr√§ningsrunda.  
- **Implementera** *transfer learning* (t.ex. EfficientNet/ResNet) f√∂r att kunna hantera egna mobilbilder b√§ttre.  
    Mobilbilder skiljer sig ofta fr√•n Kaggle-datat (ljus, vinkel, bakgrund), och f√∂rtr√§nade n√§tverk kan d√§rf√∂r f√∂rb√§ttra generaliseringen.
- **MLOps**: Versionera data/modeller, automatisera utv√§rdering och export (t.ex. DVC + GitHub Actions).
"""
)

# ---------------- Tech stack ----------------
st.subheader("Tech-stack")
st.markdown(
    """
**Python ¬∑ TensorFlow/Keras ¬∑ Keras-Tuner ¬∑ scikit-learn ¬∑ NumPy ¬∑ Matplotlib**  
**UMAP-learn** (f√∂r visualisering) ¬∑ **Streamlit** (UI)  
"""
)

# ---------------- Disclaimer ----------------
st.warning("‚ö†Ô∏è Endast f√∂r utbildning/demo. Kontakta sjukv√•rden vid oro √∂ver hudf√∂r√§ndringar.")
